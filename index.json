{
	"pages": [
		{"title": "wiki as repo", "text": "wiki as repo\nCheck the index.md to read about this claim!\nThe gh pages are created using vegetables üçÜüå∂ü•ïüçÖ, no, üçÖ no, that&#39;s a fruit.\nTo build it use:\nnpm install vegetables\nvegetables generate # to see it locally\nvegetables deploy # to push it to github\n\n", "tags": "", "url": "index.html"},
		{"title": "md Documentation (wiki) as a repository", "text": "md Documentation (wiki) as a repository\nWhy I think is an awesome idea!\nüòé\nKeep your code close and your documentation closer\nWhen writing documentation for code as a different task then it becomes outdated\nvery quickly. That&#39;s one reason of why we prefer have the documentation closer\nto the code.\ne.g., as docstrings in Python\ndef greet(name):\n    &#39;&#39;&#39;\n    Generate a greeting string for a person.\n\n    Parameters\n    ----------\n    name: str\n       name you want to greet\n\n    Returns\n    -------\n    string\n      Just a greeting\n    &#39;&#39;&#39;\n    return f&quot;Hey, {name} how are you doing?&quot;\n\nLet&#39;s now see how this small fits with the rest of the decisions for tools and\nprocesses.\nFormat\nThough it may seem silly, a familiar format to all makes a difference on its adoption.\nI propose markdown, but all that I&#39;m posting here works with any of the simple\nmarkup languages. The best part of it is that they are human readable!\n# This is a title\n\n## and this a subtitle \n\nWhere you **can** _write_ whatever ~~you want~~, \nand create [links to any page and within the document](#summary).\n\nAnd code gets highlighted by writing something like: \nssh ssh.rc.ucl.ac.uk\n\n‚ö†\nSome tools may accept markup text as an input... \nbut then once get rendered you lost what was used to created it.\nAutomation\nEither is just for searching a term (rg, grep, ...), search and replace a\nword (sed &#39;s/master/main/g/&#39;) or test that links are still available\n(lychee)... you&#39;d like to do so quickly, being sure you are not missing\nanything.\nHaving plain text files where you can run these operations will make your life easier.\nReview\nCode gets reviewed in all our projects, why shouldn&#39;t the documentation deserve the same honours?\nDocumentation under a git repository would benefit of the git-flow process.\nContribution\nFor me, a wiki is a wiki if anyone can edit it. If I need to be in a particular\nteam and I can&#39;t update something I see it&#39;s wrong or outdated, then... what&#39;s the point?\nAny git hosting platform provides ways to create contributions via pull or merge requests.\nBut... what about the unfamiliar with git? You can edit it from the website!\n\nPresentation\nYou may have guessed right already! This document is using markdown, and lives on its own repository. And it can be converted easily to different types of output (html, pdf, ...)\nDid you know...?\n\nIssues to keep it up to date\nSometimes we spot typos, have new ideas, or need to update things... but many\ntimes that happens when we don&#39;t have the time to add it to the documentation.\nWhat do we do then? we keep it in our heads, we write it a post it, we keep it for ourselves!\nUsing issues for that not only helps us as a reminder to do it later, but it\nalso warns others that there&#39;s something that needs change and even maybe\nsomeone updates it for you!\nSummary\nWe use tools to write code (and sometimes documentation), the closer these tools\nare to us, bigger the chances we will use it.\nWe want\n\nsomething close to most of us,\nusing a familiar format,\nthat we can automate if needed,\nthat&#39;s easy to review,\nand easy to contribute,\nthat&#39;s portable (and presentable as we like)\n\nHaving any type of documentation as plain text (md) within a git repository\nhits all these points.\n", "tags": "", "url": "index.html"}
	]
}
